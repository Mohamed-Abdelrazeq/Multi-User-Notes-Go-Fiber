// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notes.sql

package db

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (user_id, title, content) VALUES ($1, $2, $3) RETURNING id, title, content, user_id, is_favourite, created_at
`

type CreateNoteParams struct {
	UserID  int32  `json:"user_id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.UserID, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.IsFavourite,
		&i.CreatedAt,
	)
	return i, err
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT id, title, content, user_id, is_favourite, created_at FROM notes WHERE user_id = $1
`

func (q *Queries) GetAllNotes(ctx context.Context, userID int32) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getAllNotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.IsFavourite,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
